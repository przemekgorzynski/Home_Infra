- name: Store ZFS encryption key
  ansible.builtin.copy:
    content: "{{ ZFS_ENCRYPTION_KEY | b64decode }}"
    dest: "{{ zfs.encryption.keylocation }}"
    mode: '0600'

- name: Ensure ZFS pool mount directories exist
  ansible.builtin.file:
    path: "{{ item.mount_directory }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop: "{{ zfs.zfs_pools }}"
  loop_control:
    label: "{{ item.pool_name }}"

- name: Create ZFS pools
  community.general.zpool:
    name: "{{ item.pool_name }}"
    state: present
    force: true
    vdevs: "{{ item.vdevs }}"
    filesystem_properties: "{{ item.filesystem_properties | default({}) }}"
  loop: "{{ zfs.zfs_pools }}"
  loop_control:
    label: "{{ item.pool_name }}"

- name: Create ZFS datasets
  when: zfs.zfs_pools is defined and zfs.zfs_pools | length > 0
  community.general.zfs:
    name: "{{ dataset.dataset_name }}"
    state: present
    extra_zfs_properties:
      encryption: "{{ zfs.encryption.encryption }}"
      keyformat: "{{ zfs.encryption.keyformat }}"
      keylocation: "file://{{ zfs.encryption.keylocation }}"
      compression: "{{ dataset.compression }}"
      setuid: "{{ dataset.setuid }}"
      mountpoint: "{{ dataset.mountpoint }}"
      recordsize: "{{ dataset.recordsize | default(omit) }}"
      dedup: off
      exec: off
      atime: off
  loop: "{{ zfs.zfs_pools | subelements('datasets') }}"
  loop_control:
    label: "{{ dataset.dataset_name }}"
  vars:
    dataset: "{{ item.1 }}"

- name: Set ownership to appsvc (UID 2000) for ZFS datasets
  file:
    path: "{{ dataset.mountpoint }}"
    owner: 2000
    group: 2000
    recurse: yes
  loop: "{{ zfs.zfs_pools | subelements('datasets') }}"
  loop_control:
    label: "{{ dataset.dataset_name }}"
  vars:
    dataset: "{{ item.1 }}"

- name: Ensure ZFS encrypted datasets mount at boot via cron
  ansible.builtin.cron:
    name: "Load ZFS keys and mount datasets at boot"
    user: root
    special_time: reboot
    job: "/usr/sbin/zfs load-key -a && /usr/sbin/zfs mount -a"