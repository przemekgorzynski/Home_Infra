- name: Execute ArgoCD installation script
  ansible.builtin.shell: |
    helm repo add argo https://argoproj.github.io/argo-helm
    helm repo update

    HASHED_ADMIN_PASS=$(htpasswd -nbBC 10 "" "$ARGO_ADMIN_PASS" | tr -d ':\n')
    helm list -A
    helm upgrade --install argocd argo/argo-cd \
      --namespace "{{ k3s.argocd.namespace }}" \
      --create-namespace \
      --set server.service.type=NodePort \
      --set server.service.nodePortHttps="{{ k3s.argocd.https_node_port }}" \
      --set server.service.nodePortHttp="{{ k3s.argocd.http_node_port }}" \
      --set-string "configs.repositories.repo1.url={{ k3s.argocd.connected_repo }}" \
      --set-string "configs.repositories.repo1.type=git" \
      --set-string "configs.repositories.repo1.name=connected-repo" \
      --set-string "configs.repositories.repo1.sshPrivateKey=$ARGO_SSH_PRIVATE_KEY" \
      --set-string "configs.secret.argocdServerAdminPassword=$HASHED_ADMIN_PASS"
  environment:
    KUBECONFIG: "{{ k3s.kubeconfig_file }}"
    ARGO_SSH_PRIVATE_KEY: "{{ ARGO_CD_PRIVATE_KEY }}"
    ARGO_ADMIN_PASS: "{{ ARGO_CD_ADMIN_PASS }}"
  args:
    executable: /bin/bash
  become: false

- name: Deploy Argo config
  block:
    - name: Copy Argo manifest to temp location
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/tmp/{{ item | basename }}"
        mode: '0644'
      loop:
        - "{{ role_path }}/files/argo_projects.yml"
        - "{{ role_path }}/files/argo_app_of_apps.yml"
    - name: Apply Argo manifest
      kubernetes.core.k8s:
        kubeconfig: "{{ k3s.kubeconfig_file }}"
        state: present
        src: "{{ item }}"
      loop:
        - "/tmp/argo_projects.yml"
        - "/tmp/argo_app_of_apps.yml"
    - name: Remove temporary Argo manifest
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/argo_projects.yml"
        - "/tmp/argo_app_of_apps.yml"

    - name: Set doppler secret env cleanly
      ansible.builtin.copy:
        dest: /etc/profile.d/doppler.sh
        content: 'export DOPPLER_SERVICE_TOKEN="{{ lookup("env", "DOPPLER_SERVICE_TOKEN") }}"'
        owner: root
        group: root
        mode: '0644'

    - name: Reload environment
      ansible.builtin.shell: source /etc/profile.d/doppler.sh
      args:
        executable: /bin/bash