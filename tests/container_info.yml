---
- name: Pause for a 30 seconds before inspecting {{ item.name | upper }}
  ansible.builtin.pause:
    seconds: 30

- name: Get container data - {{ item.name | upper }}
  ansible.builtin.command:
    cmd: docker inspect "{{ item.name }}"
  register: docker_output
  changed_when: false

- name: Reach URI - {{ item.name | upper }}
  ansible.builtin.uri:
    url: "{{ item.http_endpoint }}"
    return_content: false
    status_code: 200
  register: uri_output
  when: item.http_endpoint is defined

- name: Set container facts
  ansible.builtin.set_fact:
    container_name: "{{ item.name | upper }}"
    container_state: "{{ (docker_output.stdout | from_json)[0].State.Status | upper }}"
    container_image: "{{ (docker_output.stdout | from_json)[0].Config.Image }}"
    container_restarting: "{{ (docker_output.stdout | from_json)[0].State.Restarting }}"
    container_errors: "{{ (docker_output.stdout | from_json)[0].State.Error }}"
    container_http_endpoint: "{{ item.http_endpoint | default(' --- ') }}"
    container_http_code: "{{ uri_output.status | default(' --- ') }}"
    container_health_status: "{{ (docker_output.stdout | from_json)[0].State.Health.Status | upper }}"
    container_health_failing: "{{ (docker_output.stdout | from_json)[0].State.Health.FailingStreak | upper }}"

# yamllint disable rule:indentation
- name: Print container data - {{ container_name }}
  ansible.builtin.debug:
    msg: |
      GENERAL:
        Name: {{ container_name }}
        State: {{ container_state }}
        Image: {{ container_image }}
        Restarting: {{ container_restarting }}
        Error: {{ container_errors }}
      HTTP:
        Endpoint: {{ container_http_endpoint }}
        Code: {{ container_http_code }}
      HEALTHCHECK:
        Status: {{ container_health_status }}
        Failing: {{ container_health_failing }}
# yamllint enable rule:indentation

- name: Fail when contianer how healthy
  ansible.builtin.fail:
    msg: Container is not healthy - {{ container_name }}
  when: container_health_status != 'HEALTHY'
